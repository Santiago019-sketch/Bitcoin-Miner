-- Cleanup existing GUI
if game:GetService("CoreGui"):FindFirstChild("OrionLib") then
    game:GetService("CoreGui"):FindFirstChild("OrionLib"):Destroy()
end

-- Services
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer
local VirtualUser = game:GetService('VirtualUser')
local TweenService = game:GetService("TweenService")

-- Config
local Config = {
    AutoCollectEnabled = false,
    CollectDelay = 0.1,
    ExchangeDelay = 0.1,
    AutoCrystalTP = false,
    AutoExchangeEnabled = false,
    AutoMineEnabled = false,
    AutoUpgradeEnabled = false
}

-- Known codes
local codes = {
    "Release",
    "500Likes",
    "1kLikes",
    "2kLikes",
    "3kLikes",
    "4kLikes",
    "5kLikes",
    "Update1",
    "NewYear2024",
}

-- Create Window
local Window = OrionLib:MakeWindow({
    Name = "Crypto Miner Ultimate",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "CryptoMinerConfig"
})

-- Mining Tab
local MiningTab = Window:MakeTab({
    Name = "Mining",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local MiningSection = MiningTab:AddSection({
    Name = "Mining Features"
})

-- Auto Mine Toggle
MiningSection:AddToggle({
    Name = "Auto Mine",
    Default = false,
    Callback = function(Value)
        Config.AutoMineEnabled = Value
        if Value then
            spawn(function()
                while Config.AutoMineEnabled do
                    if RS:FindFirstChild("Events") and RS.Events:FindFirstChild("Mine") then
                        RS.Events.Mine:FireServer()
                    end
                    task.wait(0.1)
                end
            end)
        end
    end
})

-- Exchange Tab
local ExchangeTab = Window:MakeTab({
    Name = "Exchange",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local ExchangeSection = ExchangeTab:AddSection({
    Name = "Auto Exchange"
})

-- Auto Exchange Toggle
ExchangeSection:AddToggle({
    Name = "Auto Exchange",
    Default = false,
    Callback = function(Value)
        Config.AutoExchangeEnabled = Value
        if Value then
            spawn(function()
                while Config.AutoExchangeEnabled do
                    if RS:FindFirstChild("Events") and RS.Events:FindFirstChild("Exchange") then
                        RS.Events.Exchange:FireServer()
                    end
                    task.wait(Config.ExchangeDelay)
                end
            end)
        end
    end
})

-- Exchange Delay Slider
ExchangeSection:AddSlider({
    Name = "Exchange Delay",
    Min = 0.1,
    Max = 5,
    Default = 0.1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.1,
    ValueName = "seconds",
    Callback = function(Value)
        Config.ExchangeDelay = Value
    end    
})

-- Algorithm Tab
local AlgorithmTab = Window:MakeTab({
    Name = "Algorithm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AlgorithmSection = AlgorithmTab:AddSection({
    Name = "Auto Upgrade"
})

-- Auto Upgrade Toggle
AlgorithmSection:AddToggle({
    Name = "Auto Upgrade Algorithm",
    Default = false,
    Callback = function(Value)
        Config.AutoUpgradeEnabled = Value
        if Value then
            spawn(function()
                while Config.AutoUpgradeEnabled do
                    if RS:FindFirstChild("Events") and RS.Events:FindFirstChild("UpgradeAlgorithm") then
                        RS.Events.UpgradeAlgorithm:FireServer()
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

-- Crystal Tab
local CrystalTab = Window:MakeTab({
    Name = "Crystals",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local CrystalSection = CrystalTab:AddSection({
    Name = "Crystal Collection"
})

-- Function to find nearest crystal
local function findNearestCrystal()
    local nearestCrystal = nil
    local minDistance = math.huge
    
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and (
            v.Name:lower():match("crystal") or 
            v.Name:lower():match("gem") or 
            v.Name:lower():match("red") or 
            v.Name:lower():match("green") or 
            v.Name:lower():match("blue")
        ) then
            local distance = (LP.Character.HumanoidRootPart.Position - v.Position).Magnitude
            if distance < minDistance then
                minDistance = distance
                nearestCrystal = v
            end
        end
    end
    return nearestCrystal
end

-- Function to teleport to crystal
local function teleportToCrystal(crystal)
    if crystal and LP.Character and LP.Character:FindFirstChild("HumanoidRootPart") then
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(crystal.Position + Vector3.new(0, 3, 0))
    end
end

-- Auto Crystal Toggle
local autoCrystalLoop = nil
CrystalSection:AddToggle({
    Name = "Auto Collect Crystals",
    Default = false,
    Callback = function(Value)
        Config.AutoCrystalTP = Value
        if Value then
            if autoCrystalLoop then
                task.cancel(autoCrystalLoop)
            end
            autoCrystalLoop = task.spawn(function()
                while Config.AutoCrystalTP do
                    local crystal = findNearestCrystal()
                    if crystal then
                        teleportToCrystal(crystal)
                        task.wait(0.5)
                        -- Try to collect using different methods
                        if RS and RS:FindFirstChild("Events") then
                            RS.Events.CollectGem:FireServer(2)
                            RS.Events.CollectGem:FireServer(3)
                            RS.Events.CollectGem:FireServer(6)
                            
                            local prompt = crystal:FindFirstChild("ProximityPrompt")
                            if prompt then
                                fireproximityprompt(prompt)
                            end
                        end
                    end
                    task.wait(1)
                end
            end)
        else
            if autoCrystalLoop then
                task.cancel(autoCrystalLoop)
                autoCrystalLoop = nil
            end
        end
    end
})

-- Codes Tab
local CodesTab = Window:MakeTab({
    Name = "Codes",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local CodesSection = CodesTab:AddSection({
    Name = "Redeem Codes"
})

-- Function to redeem a code
local function redeemCode(code)
    if RS:FindFirstChild("Events") and RS.Events:FindFirstChild("RedeemCode") then
        RS.Events.RedeemCode:FireServer(code)
    end
end

-- Add button to redeem all codes
CodesSection:AddButton({
    Name = "Redeem All Codes",
    Callback = function()
        for _, code in ipairs(codes) do
            redeemCode(code)
            task.wait(0.5)
        end
        OrionLib:MakeNotification({
            Name = "Codes",
            Content = "Attempted to redeem all codes!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Initialize
OrionLib:Init()

-- Anti-AFK
LP.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

-- Cleanup on script end
game:GetService("CoreGui").ChildRemoved:Connect(function(child)
    if child.Name == "OrionLib" then
        Config.AutoCollectEnabled = false
        Config.AutoCrystalTP = false
        Config.AutoExchangeEnabled = false
        Config.AutoMineEnabled = false
        Config.AutoUpgradeEnabled = false
        if autoCrystalLoop then
            task.cancel(autoCrystalLoop)
        end
        OrionLib:Destroy()
    end
end)
