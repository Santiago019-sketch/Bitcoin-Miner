-- Remove existing GUI if present
if game:GetService("CoreGui"):FindFirstChild("BCMX") then
    game:GetService("CoreGui"):FindFirstChild("BCMX"):Destroy()
end

-- Load Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Create window with error handling
local Window = OrionLib:MakeWindow({
    Name = "BCMX - Midnight Hub", 
    HidePremium = false,
    SaveConfig = true, 
    ConfigFolder = "BCMX"
})

-- Services
local WS = game:GetService("Workspace")
local LP = game:GetService("Players").LocalPlayer
local RS = game:GetService("ReplicatedStorage")

-- Create tabs
local CreditsTab = Window:MakeTab({
    Name = "Credits",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local PlotTab = Window:MakeTab({
    Name = "Plot",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Add credits
CreditsTab:AddParagraph("Script Information","Original script by Midnight Hub\nModified and enhanced version")

-- Variables
local BitcoinMultiplier = 50
local SolarisMultiplier = 50
local WalkSpeed = 16

-- Exchanging Section
MainTab:AddSlider({
    Name = "Bitcoin Multiplier",
    Min = 50,
    Max = 1000,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "x",
    Callback = function(Value)
        BitcoinMultiplier = Value
    end    
})

MainTab:AddButton({
    Name = "Exchange Bitcoins",
    Callback = function()
        if not WS:FindFirstChild("Region_ExChang1") then return end
        for i = 1, BitcoinMultiplier do
            local button = WS.Region_ExChang1:FindFirstChild("Button")
            if button and button:FindFirstChild("Clicked") then
                button.Clicked:FireServer(true)
            end
        end
    end    
})

MainTab:AddSlider({
    Name = "Solaris Multiplier",
    Min = 50,
    Max = 1000,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "x",
    Callback = function(Value)
        SolarisMultiplier = Value
    end    
})

MainTab:AddButton({
    Name = "Exchange Solaris",
    Callback = function()
        if not WS:FindFirstChild("Region_ExChang1") then return end
        for i = 1, SolarisMultiplier do
            local button = WS.Region_ExChang1:FindFirstChild("Button")
            if button and button:FindFirstChild("Clicked") then
                button.Clicked:FireServer(false)
            end
        end
    end    
})

-- Player Section
MainTab:AddSlider({
    Name = "Walkspeed",
    Min = 16,
    Max = 100,
    Default = 16,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "",
    Callback = function(Value)
        WalkSpeed = Value
        if LP.Character and LP.Character:FindFirstChild("Humanoid") then
            LP.Character.Humanoid.WalkSpeed = WalkSpeed
        end
    end    
})

-- Update walkspeed on character spawn
LP.CharacterAdded:Connect(function(char)
    local humanoid = char:WaitForChild("Humanoid", 10)
    if humanoid then
        humanoid.WalkSpeed = WalkSpeed
    end
end)

MainTab:AddButton({
    Name = "Remove Level Barriers",
    Callback = function()
        for _, v in ipairs(WS:GetChildren()) do
            for _, child in ipairs(v:GetChildren()) do
                if child:FindFirstChildOfClass("TouchTransmitter") and child:FindFirstChildOfClass("SurfaceGui") then
                    child:Destroy()
                end
            end
        end
    end    
})

-- Tables & Cards Section
local ShelfNames = {
    ["Table"] = true,
    ["Double Shelf"] = true,
    ["Triple Shelf"] = true,
    ["Server Shelf"] = true
}

local Buildings = WS:WaitForChild("Buildings", 10):WaitForChild(LP.Name, 10)
local PlaceCard = RS:WaitForChild("Events", 10):FindFirstChild("PlaceCard")
local BuyCard = RS:WaitForChild("Events", 10):FindFirstChild("BuyCard")

local function GetCard(CardName)
    for _, v in ipairs(WS:GetDescendants()) do
        if v.Name == "Shows" then
            for _, show in ipairs(v:GetChildren()) do
                local model = show:FindFirstChildOfClass("Model")
                if model and model.Name == CardName then
                    return show
                end
            end
        end
    end
    return nil
end

-- Card buying
local cardCount = 1
PlotTab:AddTextbox({
    Name = "Card Name",
    Default = "Optix 900 Card",
    TextDisappear = false,
    Callback = function(CardName)
        if CardName ~= "" then
            local cardToBuy = GetCard(CardName)
            if cardToBuy and BuyCard then
                BuyCard:FireServer(CardName, cardToBuy, cardCount)
            end
        end
    end	  
})

PlotTab:AddSlider({
    Name = "Card Amount",
    Min = 1,
    Max = 100,
    Default = 1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "",
    Callback = function(Value)
        cardCount = Value
    end    
})

-- Shelf management
local maxShelves = 1
PlotTab:AddTextbox({
    Name = "Fill Shelves with Card",
    Default = "Optix 900 Card",
    TextDisappear = false,
    Callback = function(CardName)
        if CardName ~= "" and GetCard(CardName) and PlaceCard then
            local shelvesFilled = 0
            for _, v in ipairs(Buildings:GetChildren()) do
                if ShelfNames[v.Name] then
                    if shelvesFilled == maxShelves then break end
                    shelvesFilled = shelvesFilled + 1
                    
                    for _, cardPlace in ipairs(v.Cards:GetChildren()) do
                        if cardPlace.Name == "CardPlace" and not cardPlace:FindFirstChildOfClass("Model") then
                            PlaceCard:FireServer(CardName, cardPlace)
                        end
                    end
                end
            end
        end
    end	  
})

PlotTab:AddSlider({
    Name = "Shelves Amount",
    Min = 1,
    Max = 100,
    Default = 1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "",
    Callback = function(Value)
        maxShelves = Value
    end    
})

PlotTab:AddButton({
    Name = "Remove All Cards",
    Callback = function()
        if not PlaceCard then return end
        for _, v in ipairs(Buildings:GetChildren()) do
            if ShelfNames[v.Name] then
                for _, cardPlace in ipairs(v.Cards:GetChildren()) do
                    if cardPlace.Name == "CardPlace" then
                        PlaceCard:FireServer(nil, cardPlace)
                    end
                end
            end
        end
    end    
})

-- Shelf toggles
for shelfName, _ in pairs(ShelfNames) do
    PlotTab:AddToggle({
        Name = shelfName,
        Default = true,
        Callback = function(Value)
            ShelfNames[shelfName] = Value
        end    
    })
end

-- Initialize
OrionLib:Init()

-- Notify user that script has loaded
OrionLib:MakeNotification({
    Name = "Script Loaded",
    Content = "BCMX - Midnight Hub is now ready",
    Image = "rbxassetid://4483345998",
    Time = 5
})
