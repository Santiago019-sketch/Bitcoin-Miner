-- Cleanup existing GUI
if game:GetService("CoreGui"):FindFirstChild("OrionLib") then
    game:GetService("CoreGui"):FindFirstChild("OrionLib"):Destroy()
end

-- Services
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

-- Config
local Config = {
    AutoCollectEnabled = false,
    CollectDelay = 0.1,
    ExchangeDelay = 0.1
}

-- Create Window
local Window = OrionLib:MakeWindow({
    Name = "Crypto Miner Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "CryptoMinerConfig"
})

-- Teleport Tab (New)
local TeleportTab = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local TeleportSection = TeleportTab:AddSection({
    Name = "Locations"
})

-- Function to teleport
local function teleportTo(position)
    if LP.Character and LP.Character:FindFirstChild("HumanoidRootPart") then
        LP.Character.HumanoidRootPart.CFrame = position
    end
end

-- Function to get all spawns/teleport locations in workspace
local function findTeleportLocations()
    local locations = {}
    local function searchForSpawns(parent)
        for _, v in ipairs(parent:GetChildren()) do
            if v.Name:lower():match("spawn") or 
               v.Name:lower():match("teleport") or 
               v.Name:lower():match("location") or 
               v.Name:lower():match("mine") or 
               v.Name:lower():match("area") then
                if v:IsA("BasePart") or v:IsA("Model") then
                    table.insert(locations, {name = v.Name, instance = v})
                end
            end
            if #v:GetChildren() > 0 then
                searchForSpawns(v)
            end
        end
    end
    searchForSpawns(workspace)
    return locations
end

-- Add found locations to teleport tab
local locations = findTeleportLocations()
for _, location in ipairs(locations) do
    TeleportSection:AddButton({
        Name = "Teleport to " .. location.name,
        Callback = function()
            if location.instance:IsA("Model") and location.instance:FindFirstChild("HumanoidRootPart") then
                teleportTo(location.instance.HumanoidRootPart.CFrame)
            elseif location.instance:IsA("BasePart") then
                teleportTo(location.instance.CFrame)
            end
        end
    })
end

-- Add manual location saving
local savedLocations = {}

TeleportSection:AddButton({
    Name = "Save Current Location",
    Callback = function()
        if LP.Character and LP.Character:FindFirstChild("HumanoidRootPart") then
            local pos = LP.Character.HumanoidRootPart.Position
            table.insert(savedLocations, {
                name = "Saved Location " .. #savedLocations + 1,
                position = LP.Character.HumanoidRootPart.CFrame
            })
            
            -- Add button for the new saved location
            TeleportSection:AddButton({
                Name = "Teleport to Saved Location " .. #savedLocations,
                Callback = function()
                    teleportTo(savedLocations[#savedLocations].position)
                end
            })
            
            OrionLib:MakeNotification({
                Name = "Location Saved",
                Content = "Current position has been saved!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

-- Mining Tab
local MiningTab = Window:MakeTab({
    Name = "Mining",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Crystal Collection Section
local CrystalSection = MiningTab:AddSection({
    Name = "Crystal Collection"
})

CrystalSection:AddButton({
    Name = "Collect All Crystals",
    Callback = function()
        local crystalTypes = {2, 3, 6}
        for _, crystalId in ipairs(crystalTypes) do
            if RS and RS:FindFirstChild("Events") then
                RS.Events.CollectGem:FireServer(crystalId)
                task.wait(Config.CollectDelay)
            end
        end
    end
})

-- Auto collect crystals with proper loop
local autoCollectLoop = nil
CrystalSection:AddToggle({
    Name = "Auto Collect",
    Default = false,
    Callback = function(Value)
        Config.AutoCollectEnabled = Value
        if Value then
            if autoCollectLoop then
                task.cancel(autoCollectLoop)
            end
            autoCollectLoop = task.spawn(function()
                while Config.AutoCollectEnabled do
                    local crystalTypes = {2, 3, 6}
                    for _, crystalId in ipairs(crystalTypes) do
                        if not Config.AutoCollectEnabled then break end
                        if RS and RS:FindFirstChild("Events") then
                            RS.Events.CollectGem:FireServer(crystalId)
                        end
                        task.wait(Config.CollectDelay)
                    end
                    task.wait(0.5)
                end
            end)
        else
            if autoCollectLoop then
                task.cancel(autoCollectLoop)
                autoCollectLoop = nil
            end
        end
    end
})

CrystalSection:AddSlider({
    Name = "Collection Delay",
    Min = 0.1,
    Max = 1,
    Default = 0.1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 0.1,
    ValueName = "seconds",
    Callback = function(Value)
        Config.CollectDelay = Value
    end    
})

-- Exchange Tab
local ExchangeTab = Window:MakeTab({
    Name = "Exchange",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local ExchangeSection = ExchangeTab:AddSection({
    Name = "Currency Exchange"
})

-- Bitcoin Exchange Button
ExchangeSection:AddButton({
    Name = "Exchange Bitcoin",
    Callback = function()
        if RS and RS:FindFirstChild("Events") then
            RS.Events.ExchangeMoney:FireServer(true)
        end
    end
})

-- Solaris Exchange Button
ExchangeSection:AddButton({
    Name = "Exchange Solaris",
    Callback = function()
        if RS and RS:FindFirstChild("Events") then
            RS.Events.ExchangeMoney:FireServer(false)
        end
    end
})

-- Algorithm Tab
local AlgoTab = Window:MakeTab({
    Name = "Algorithm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AlgoSection = AlgoTab:AddSection({
    Name = "Mining Algorithm"
})

AlgoSection:AddDropdown({
    Name = "Select Algorithm",
    Default = "Algorithm 1",
    Options = {"Algorithm 1", "Algorithm 2", "Algorithm 3", "Algorithm 4"},
    Callback = function(Value)
        local algoMap = {
            ["Algorithm 1"] = 1,
            ["Algorithm 2"] = 2,
            ["Algorithm 3"] = 3,
            ["Algorithm 4"] = 4
        }
        if RS and RS:FindFirstChild("Events") then
            RS.Events.AlgoChang:FireServer(algoMap[Value])
        end
    end    
})

-- Player Tab
local PlayerTab = Window:MakeTab({
    Name = "Player",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local PlayerSection = PlayerTab:AddSection({
    Name = "Local Player"
})

PlayerSection:AddSlider({
    Name = "Walk Speed",
    Min = 16,
    Max = 100,
    Default = 16,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "speed",
    Callback = function(Value)
        if LP.Character and LP.Character:FindFirstChild("Humanoid") then
            LP.Character.Humanoid.WalkSpeed = Value
        end
    end    
})

-- Initialize
OrionLib:Init()

-- Cleanup on script end
game:GetService("CoreGui").ChildRemoved:Connect(function(child)
    if child.Name == "OrionLib" then
        Config.AutoCollectEnabled = false
        if autoCollectLoop then
            task.cancel(autoCollectLoop)
        end
        OrionLib:Destroy()
    end
end)
