-- Cleanup existing GUI
if game:GetService("CoreGui"):FindFirstChild("CryptoMiner") then
    game:GetService("CoreGui"):FindFirstChild("CryptoMiner"):Destroy()
end

-- Services
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

-- Error handling wrapper
local function safely(func)
    return function(...)
        local success, result = pcall(func, ...)
        if not success then
            warn("Error occurred:", result)
        end
        return success, result
    end
end

-- Load UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Crypto Miner Hub", "Ocean")

-- Variables with proper scoping
local Config = {
    AutoFarmEnabled = false,
    AutoCollectEnabled = false,
    CollectDelay = 0.1,
    ExchangeDelay = 0.1,
    WalkSpeed = 16
}

-- Main Mining Tab
local MiningTab = Window:NewTab("Mining")
local CrystalSection = MiningTab:NewSection("Crystal Collection")

-- Crystal Collection Functions
local function collectCrystal(crystalId)
    if RS and RS:FindFirstChild("Events") and RS.Events:FindFirstChild("CollectGem") then
        return RS.Events.CollectGem:FireServer(crystalId)
    end
    return false
end

CrystalSection:NewButton("Collect All Crystals", "Collects all available crystals", safely(function()
    local crystalTypes = {2, 3, 6}
    for _, crystalId in ipairs(crystalTypes) do
        collectCrystal(crystalId)
        task.wait(Config.CollectDelay)
    end
end))

CrystalSection:NewToggle("Auto Collect Crystals", "Automatically collects crystals", function(state)
    Config.AutoCollectEnabled = state
    task.spawn(function()
        while Config.AutoCollectEnabled do
            local crystalTypes = {2, 3, 6}
            for _, crystalId in ipairs(crystalTypes) do
                if not Config.AutoCollectEnabled then break end
                collectCrystal(crystalId)
                task.wait(Config.CollectDelay)
            end
            task.wait(0.5)
        end
    end)
end)

CrystalSection:NewSlider("Collection Delay", "Adjust collection speed", 1, 0.1, function(value)
    Config.CollectDelay = value
end)

-- Exchange Tab
local ExchangeTab = Window:NewTab("Exchange")
local ExchangeSection = ExchangeTab:NewSection("Currency Exchange")

-- Exchange Functions
local function exchangeCurrency(isBitcoin)
    if RS and RS:FindFirstChild("Events") and RS.Events:FindFirstChild("ExchangeMoney") then
        return RS.Events.ExchangeMoney:FireServer(isBitcoin)
    end
    return false
end

ExchangeSection:NewButton("Exchange Bitcoin", "Exchanges Bitcoin once", safely(function()
    exchangeCurrency(true)
end))

ExchangeSection:NewToggle("Auto Exchange Bitcoin", "Automatically exchanges Bitcoin", function(state)
    _G.AutoBitcoin = state
    task.spawn(function()
        while _G.AutoBitcoin do
            exchangeCurrency(true)
            task.wait(Config.ExchangeDelay)
        end
    end)
end)

ExchangeSection:NewButton("Exchange Solaris", "Exchanges Solaris once", safely(function()
    exchangeCurrency(false)
end))

ExchangeSection:NewToggle("Auto Exchange Solaris", "Automatically exchanges Solaris", function(state)
    _G.AutoSolaris = state
    task.spawn(function()
        while _G.AutoSolaris do
            exchangeCurrency(false)
            task.wait(Config.ExchangeDelay)
        end
    end)
end)

ExchangeSection:NewSlider("Exchange Delay", "Adjust exchange speed", 1, 0.1, function(value)
    Config.ExchangeDelay = value
end)

-- Algorithm Tab
local AlgoTab = Window:NewTab("Algorithm")
local AlgoSection = AlgoTab:NewSection("Mining Algorithm")

local algoMap = {
    ["Algorithm 1"] = 1,
    ["Algorithm 2"] = 2,
    ["Algorithm 3"] = 3,
    ["Algorithm 4"] = 4
}

AlgoSection:NewDropdown("Select Algorithm", "Choose mining algorithm", {"Algorithm 1", "Algorithm 2", "Algorithm 3", "Algorithm 4"}, safely(function(value)
    if RS and RS:FindFirstChild("Events") and RS.Events:FindFirstChild("AlgoChang") then
        RS.Events.AlgoChang:FireServer(algoMap[value])
    end
end))

-- Player Tab
local PlayerTab = Window:NewTab("Player")
local PlayerSection = PlayerTab:NewSection("Local Player")

local function updateWalkSpeed(speed)
    Config.WalkSpeed = speed
    if LP.Character and LP.Character:FindFirstChild("Humanoid") then
        LP.Character.Humanoid.WalkSpeed = speed
    end
end

PlayerSection:NewSlider("Walk Speed", "Changes your walk speed", 100, 16, function(value)
    updateWalkSpeed(value)
end)

-- Character respawn handler
LP.CharacterAdded:Connect(function(char)
    local humanoid = char:WaitForChild("Humanoid")
    if Config.WalkSpeed then
        humanoid.WalkSpeed = Config.WalkSpeed
    end
end)

-- UI Toggle
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightShift then
        Library:ToggleUI()
    end
end)

-- Initial notification
StarterGui:SetCore("SendNotification", {
    Title = "Script Loaded",
    Text = "Press Right-Shift to toggle GUI",
    Duration = 5
})
